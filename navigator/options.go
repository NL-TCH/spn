package navigator

import (
	"context"

	"github.com/safing/portmaster/intel"
	"github.com/safing/portmaster/profile/endpoints"
	"github.com/safing/spn/hub"
)

// HubType is the usage type of a Hub in routing.
type HubType uint8

// Hub Types.
const (
	HomeHub HubType = iota
	TransitHub
	DestinationHub
)

// Options holds configuration options for operations with the Map.
type Options struct { //nolint:maligned
	// Regard holds required States. Only Hubs where all of these are present
	// will taken into account for the operation. If NoDefaults is not set, a
	// basic set of desirable states is added automatically.
	Regard PinState

	// Disregard holds disqualifying States. Only Hubs where none of these are
	// present will be taken into account for the operation. If NoDefaults is not
	// set, a basic set of undesirable states is added automatically.
	Disregard PinState

	// HubPolicies is a collecion of endpoint lists that Hubs must pass in order
	// to be taken into account for the operation.
	HubPolicies []endpoints.Endpoints

	// CheckHubEntryPolicyWith provides an entity that must match the Hubs entry
	// policy in order to be taken into account for the operation.
	CheckHubEntryPolicyWith *intel.Entity

	// CheckHubExitPolicyWith provides an entity that must match the Hubs exit
	// policy in order to be taken into account for the operation.
	CheckHubExitPolicyWith *intel.Entity

	// NoDefaults declares whether default and recommended Regard and Disregard states should not be used.
	NoDefaults bool

	// RequireTrustedDestinationHubs declares whether only Destination Hubs that have the Trusted state should be used.
	RequireTrustedDestinationHubs bool

	// RoutingProfile defines the algorithm to use to find a route.
	RoutingProfile string
}

// Copy returns a shallow copy of the Options.
func (o *Options) Copy() *Options {
	return &Options{
		Regard:                        o.Regard,
		Disregard:                     o.Disregard,
		HubPolicies:                   o.HubPolicies,
		CheckHubEntryPolicyWith:       o.CheckHubEntryPolicyWith,
		CheckHubExitPolicyWith:        o.CheckHubExitPolicyWith,
		NoDefaults:                    o.NoDefaults,
		RequireTrustedDestinationHubs: o.RequireTrustedDestinationHubs,
		RoutingProfile:                o.RoutingProfile,
	}
}

// PinMatcher is a stateful matching function generated by Options.
type PinMatcher func(pin *Pin) bool

// DefaultOptions returns the default options for this Map.
func (m *Map) DefaultOptions() *Options {
	m.Lock()
	defer m.Unlock()

	return m.defaultOptions()
}

func (m *Map) defaultOptions() *Options {
	opts := &Options{
		RoutingProfile: DefaultRoutingProfileID,
	}

	return opts
}

// HubPoliciesAreSet returns whether any hub policies are set and non-empty.
func (o *Options) HubPoliciesAreSet() bool {
	for _, policy := range o.HubPolicies {
		if policy.IsSet() {
			return true
		}
	}
	return false
}

// Matcher generates a PinMatcher based on the Options.
func (o *Options) Matcher(hubType HubType, intel *hub.Intel) PinMatcher {
	// Compile states to regard and disregard.
	regard := o.Regard
	disregard := o.Disregard

	// Add default states.
	if !o.NoDefaults {
		// Add default States.
		regard = regard.add(StateSummaryRegard)
		disregard = disregard.add(StateSummaryDisregard)

		// Add type based Advisories.
		switch hubType {
		case HomeHub:
			// Home Hubs don't need to be reachable and don't need keys ready to be used.
			regard = regard.remove(StateReachable)
			regard = regard.remove(StateActive)
			disregard = disregard.add(StateUsageAsHomeDiscouraged)
		case TransitHub:
			// Transit Hubs get no additional states.
		case DestinationHub:
			disregard = disregard.add(StateUsageAsDestinationDiscouraged)
		}
	}

	// Add Trusted requirement for Destination Hubs.
	if o.RequireTrustedDestinationHubs && hubType == DestinationHub {
		regard |= StateTrusted
	}

	// Add intel policies.
	hubPolicies := o.HubPolicies
	if intel != nil && intel.Parsed() != nil {
		switch hubType {
		case HomeHub:
			hubPolicies = append(hubPolicies, intel.Parsed().HubAdvisory, intel.Parsed().HomeHubAdvisory)
		case TransitHub:
			hubPolicies = append(hubPolicies, intel.Parsed().HubAdvisory)
		case DestinationHub:
			hubPolicies = append(hubPolicies, intel.Parsed().HubAdvisory, intel.Parsed().DestinationHubAdvisory)
		}
	}

	// Add entry/exit policiy checks.
	checkHubEntryPolicyWith := o.CheckHubEntryPolicyWith
	checkHubExitPolicyWith := o.CheckHubExitPolicyWith

	return func(pin *Pin) bool {
		// Check required Pin States.
		if !pin.State.has(regard) || pin.State.hasAnyOf(disregard) {
			return false
		}

		// Check policies.
		for _, policy := range hubPolicies {
			switch {
			case endpointListMatch(policy, pin.EntityV4) == endpoints.Denied:
				// Hub is denied by policy with its IPv4 entity.
				return false
			case endpointListMatch(policy, pin.EntityV6) == endpoints.Denied:
				// Hub is denied by policy with its IPv6 entity.
				return false
			}
		}

		// Check entry/exit policies.
		if checkHubEntryPolicyWith != nil &&
			endpointListMatch(pin.Hub.GetInfo().EntryPolicy(), checkHubEntryPolicyWith) == endpoints.Denied {
			// Hub does not allow entry from the given entity.
			return false
		}
		if checkHubExitPolicyWith != nil &&
			endpointListMatch(pin.Hub.GetInfo().EntryPolicy(), checkHubExitPolicyWith) == endpoints.Denied {
			// Hub does not allow exit to the given entity.
			return false
		}

		return true // All checks have passed.
	}
}

func endpointListMatch(list endpoints.Endpoints, entity *intel.Entity) endpoints.EPResult {
	// Check if endpoint list and entity are available.
	if !list.IsSet() || entity == nil {
		return endpoints.NoMatch
	}

	// Match and return result only.
	result, _ := list.Match(context.TODO(), entity)
	return result
}
